{"version":3,"sources":["reportWebVitals.js","InfiniteScroll.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","divStyle","color","height","textAlign","padding","background","marginTop","containerStyle","maxWidth","margin","InifiniteScroll","useState","list","postList","setPostList","page","setPage","loader","useRef","useEffect","observer","IntersectionObserver","handleObserver","root","rootMargin","threshold","current","observe","newList","concat","entities","isIntersecting","className","style","map","post","index","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJAYeA,G,KAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,cCFRQ,EAAW,CACbC,MAAO,OACPC,OAAQ,QACRC,UAAW,SACXC,QAAS,WACTC,WAAY,OACZC,UAAW,QAGTC,EAAiB,CACnBC,SAAU,SACVC,OAAQ,UAyDGC,EAtDS,WACpB,MAAgCC,mBAAS,CACrCC,KAAM,CAAC,eAAgB,gBAAiB,gBAAiB,KAD7D,mBAAOC,EAAP,KAAiBC,EAAjB,KAGA,EAAwBH,mBAAS,GAAjC,mBAAOI,EAAP,KAAaC,EAAb,KAEMC,EAASC,iBAAO,MAEtBC,qBAAU,WACN,IAKMC,EAAW,IAAIC,qBAAqBC,EAL5B,CACVC,KAAM,KACNC,WAAY,OACZC,UAAW,IAGXR,EAAOS,SACPN,EAASO,QAAQV,EAAOS,WAI7B,IAEHP,qBAAU,WACN,IAAMS,EAAQf,EAASD,KAAKiB,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IAC9Cf,EAAY,CACRF,KAAKgB,MAEX,CAACb,IAEH,IAAMO,EAAe,SAACQ,GACLA,EAAS,GACZC,gBACNf,GAAQ,SAACD,GAAD,OAAQA,EAAK,MAI7B,OAAQ,qBAAKiB,UAAU,YAAYC,MAAO1B,EAAlC,SACJ,sBAAKyB,UAAU,YAAf,UAEQnB,EAASD,KAAKsB,KAAI,SAACC,EAAMC,GACrB,OAAQ,qBACJJ,UAAU,OACVC,MAAOjC,EAFH,SAGJ,6BAAKmC,KAHSC,MAO1B,qBAAKJ,UAAU,UAAUK,IAAKpB,EAA9B,SACI,mDC5DhBqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BnD,K","file":"static/js/main.3b6eed19.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from 'react';\r\nconst divStyle = {\r\n    color: 'blue',\r\n    height: '250px',\r\n    textAlign: 'center',\r\n    padding: '5px 10px',\r\n    background: '#eee',\r\n    marginTop: '15px'\r\n};\r\n\r\nconst containerStyle = {\r\n    maxWidth: '1280px',\r\n    margin: '0 auto',\r\n}\r\n\r\nconst InifiniteScroll = () => {\r\n    const [postList, setPostList] = useState({\r\n        list: [\"Introduction\", \"Many projects\", \"Keep In touch\", 4]\r\n    });\r\n    const [page, setPage] = useState(1);\r\n\r\n    const loader = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let options = {\r\n            root: null,\r\n            rootMargin: \"20px\",\r\n            threshold: 1.0\r\n        };\r\n        const observer = new IntersectionObserver(handleObserver, options);\r\n        if (loader.current) {\r\n            observer.observe(loader.current)\r\n        }\r\n\r\n\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        const newList=postList.list.concat([1,1,1,1,1,1]);\r\n        setPostList({\r\n            list:newList\r\n        })\r\n    },[page])\r\n\r\n    const handleObserver=(entities)=>{\r\n        const target=entities[0];\r\n        if(target.isIntersecting){\r\n            setPage((page)=>page+1)\r\n        }\r\n    }\r\n\r\n    return (<div className=\"container\" style={containerStyle}>\r\n        <div className=\"post-list\">\r\n            {\r\n                postList.list.map((post, index) => {\r\n                    return (<div key={index}\r\n                        className=\"post\"\r\n                        style={divStyle}>\r\n                        <h2>{post}</h2>\r\n                    </div>)\r\n                })\r\n            }\r\n            <div className=\"loading\" ref={loader}>\r\n                <h2>Load More</h2>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default InifiniteScroll;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\nimport InifiniteScroll from './InfiniteScroll';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n   <InifiniteScroll/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}